C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TP4_MAIN
OBJECT MODULE PLACED IN .\src/tp4_main.OBJ
COMPILER INVOKED BY: Z:\home\rootie\Documents\SimplicityStudio_v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe /home/
                    -rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/rootie/Documents/SimplicityStudio_v5
                    -/developer/sdks/8051/v4.2.0//Device/shared/si8051Base;/home/rootie/Documents/SimplicityStudio_v5/developer/sdks/8051/v4.
                    -2.0//Device/EFM8BB3/inc) REGFILE(tp4.ORC) PRINT(.\src/tp4_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/tp4_
                    -main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          #include <SI_EFM8BB3_Register_Enums.h>                // SFR declarations
   5          #include "../inc/InitDevice.h"
   6          #include "../inc/SMBus_MasterMultibyte.h"
   7          #include "../inc/SSD1306.h"
   8          
   9          //#pragma userclass (xdata = flash)
  10          
  11          xdata uint8_t sdat[1024] = {0x0, 0x0, 0xc0, 0xf0, 0xf8, 0x1c, 0xc, 0x4, 0x4, 0x4, 0x1c, 0xf8, 0xf0, 0xc0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0xfc, 0xfc, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18,
             - 0xc, 0xc, 0xc, 0x1c, 0x3c, 0xf8, 0xf8, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x30, 0x18, 0xc, 0xc, 0xc, 0xc, 0x1c, 0xf8,
             - 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xe0, 0x30, 0xf8, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x80, 0xe0, 0xfc, 0x8c, 0x8c, 0x8c, 0xc, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0xe0, 0x70, 0x3
             -8, 0x18, 0xc, 0xc, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x1c, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xcc, 0xfc, 0x7c, 0
             -x4, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf7, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0x60, 0x38, 0x1f, 0x
             -f, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xc, 0xe, 0x1f, 0x3d, 0xf8, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe
             -0, 0xd8, 0xcc, 0xc3, 0xc1, 0xc0, 0xc0, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x3, 0x3, 0x3, 0
             -x7, 0xf, 0x1f, 0xfe, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xff, 0xff, 0x7, 0x6, 0x2, 0x2, 0x6, 0xe, 0xfe, 0xfc, 0xf8, 0x
             -0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xf0, 0xfe, 0x1f, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x7, 0xf, 0x1
             -c, 0x10, 0x10, 0x10, 0x10, 0x1c, 0xf, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x1f, 0x1f, 0x1f, 0x10, 0x10, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x18, 0x1c, 0x1a, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0,
             - 0x0, 0x8, 0x1c, 0x18, 0x18, 0x10, 0x10, 0x10, 0x8, 0xc, 0x7, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x1c, 0x1c, 0x18, 0x10, 0x10, 0x18, 0x8, 0xe, 0x7, 0x1, 0x0,
             - 0x0, 0x0, 0x0, 0x0, 0x1, 0x7, 0xf, 0x1c, 0x18, 0x10, 0x10, 0x10, 0x18, 0xf, 0x7, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x1c, 0x1f, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0xfc, 0xc6, 0x82, 0x2, 0x2, 0x2, 0xce, 0
             -xfc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf8, 0xfc, 0x6, 0x2, 0x2, 0x2, 0x6, 0xc, 0xfc, 0xf8, 0xe0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x80, 0xe0, 0xf1, 0x1b, 0x7, 0x7, 0xf, 0x1f, 0x3d, 0xf8, 0xf0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0xf, 0xc, 0xc, 0x8,
             - 0x8, 0xc8, 0xfc, 0xff, 0x7f, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x7, 0xe, 0x8, 0x8, 0x8, 0x8, 0xc, 0x7, 0x3, 0x1, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0xc, 0xc, 0x6, 0x7, 0x3, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 
             -0xe, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 2   

             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
  12          
  13          uint8_t SMB_DATA_IN[NUM_BYTES_RD];
  14          
  15          int NUM_BYTES_WR = 6;
  16          
  17          // Global holder for SMBus data.
  18          // All transmit data is read from herexdata uint8_t sdat[1024] = {0x1, 0x0, 0xe0, 0xf0, 0xf8, 0x7c, 0xc, 0
             -x4, 0x4, 0xc, 0x3c, 0xf8, 0xf8, 0xc0, 0x0, 0x1, 0x0, 0x0, 0x18, 0x18, 0xfc, 0xfc, 0xfe, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0
             -x0, 0x1, 0x0, 0x60, 0x78, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x3c, 0xfc, 0xf8, 0xf0, 0xc0, 0x0, 0x1, 0x0, 0x70, 0x38, 0x1c, 0
             -xc, 0xc, 0xc, 0x1c, 0xfc, 0xfc, 0xf8, 0x70, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0xe0, 0x78, 0xfc, 0xfc, 0xfc,
             - 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xc0, 0xf8, 0xfc, 0xdc, 0x9c, 0x9c, 0x9c, 0x1c, 0x1c, 0xe, 0x6, 0x0, 0x1, 0x0, 0x0, 0xc0,
             - 0xe0, 0xf0, 0xf0, 0x78, 0x18, 0x1c, 0xc, 0x4, 0x4, 0x4, 0x0, 0x1, 0x0, 0x60, 0x7c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 
             -0x1c, 0xfc, 0xfc, 0xfc, 0x1c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x
             -0, 0x0, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0xf0, 0x7c, 0x1f, 0xf, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xc, 0xc, 0xe, 0x1f,
             - 0xff, 0xfd, 0xf8, 0xe0, 0x0, 0x0, 0x0, 0xe0, 0xf8, 0xce, 0xc7, 0xc3, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x0, 0x0
             -, 0x0, 0x1, 0x3, 0x3, 0x3, 0x3, 0x7, 0x7, 0xf, 0xff, 0xfe, 0xfc, 0xf0, 0x0, 0x0, 0x78, 0xff, 0xff, 0xff, 0xf, 0x6, 0x6, 
             -0x6, 0x6, 0x1e, 0xfe, 0xfc, 0xf8, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xf8, 0xff, 0x3f, 0x7, 0x0, 0x0, 0
             -x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x3, 0x7, 0xf, 0x1e, 0x18, 0x10, 0x10, 0x18, 0x1e, 0xf, 0xf, 0x3, 0x0,
             - 0x80, 0x0, 0x0, 0x10, 0x10, 0x1f, 0x1f, 0x1f, 0x1f, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x80, 0x10, 0x18, 0x1c, 0x1e, 0x1f
             -, 0x1f, 0x1d, 0x1c, 0x1c, 0x1c, 0x1c, 0x18, 0x0, 0x0, 0x80, 0x0, 0x1c, 0x1c, 0x1c, 0x18, 0x18, 0x10, 0x18, 0x18, 0xf, 0x
             -7, 0x7, 0x1, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x80, 0xc, 0x1c, 0x1c, 
             -0x1c, 0x18, 0x18, 0x18, 0x18, 0x1c, 0xf, 0x7, 0x3, 0x0, 0x0, 0x80, 0x0, 0x3, 0xf, 0xf, 0x1f, 0x18, 0x18, 0x10, 0x10, 0x1
             -c, 0x1f, 0xf, 0x7, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x1e, 0x1f, 0x1f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 
             -0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0xfc, 0xfc, 0xfe, 0x86, 0x2, 0x2, 0x86, 0xfe, 0xfe, 0xfc, 0x30, 0x0, 0x0, 0xe0,
             - 0xf8, 0xfc, 0xfe, 0xe, 0x6, 0x2, 0x2, 0x6, 0xfe, 0xfc, 0xf8, 0xf0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
             -x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
             -x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
             -x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
             -x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xf1, 0xfb, 0x3f, 0x
             -f, 0xf, 0x1f, 0x1f, 0x7d, 0xf9, 0xf8, 0xe0, 0x0, 0x0, 0x1, 0x7, 0xf, 0xf, 0xe, 0x1c, 0x1c, 0x8c, 0xec, 0xff, 0xff, 0xff,
             - 0x3f, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0xf, 0xf, 0xc, 0x8, 0x8, 0xc, 0xe, 0xf, 0x7, 0x3, 0x0, 0x0, 0x0, 0x8, 0x8, 0xc
             -, 0xc, 0xe, 0xf, 0x7, 0x7, 0x3, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe, 0xe, 0xe, 0xe, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
             -, 0x0, 0x0, 0x0, 0x0};
  19          
  20          uint8_t SMB_DATA_OUT[NUM_BYTES_WR_MAX];
  21          
  22          uint8_t TARGET;                        // Target SMBus slave address
  23          volatile int voltage = 0;
  24          volatile int amp = 0;
  25          volatile bool SMB_BUSY;                 // Software flag to indicate when the
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 3   

  26                                                 // SMB_Read() or SMB_Write() functions
  27                                                 // have claimed the SMBus
  28          
  29          volatile bool SMB_RW;                   // Software flag to indicate the
  30                                                 // direction of the current transfer
  31          
  32          uint16_t NUM_ERRORS;                   // Counter for the number of errors.
  33          
  34          //-----------------------------------------------------------------------------
  35          // Function Prototypes
  36          //-----------------------------------------------------------------------------
  37          void SMB_Write(void);
  38          void SMB_Read(void);
  39          void T0_Waitms(uint8_t ms);
  40          
  41          //-----------------------------------------------------------------------------
  42          // SiLabs_Startup() Routine
  43          // ----------------------------------------------------------------------------
  44          // This function is called immediately after reset, before the initialization
  45          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  46          // useful place to disable the watchdog timer, which is enable by default
  47          // and may trigger before main() in some instances.
  48          //-----------------------------------------------------------------------------
  49          void SiLabs_Startup (void)
  50          {
  51   1      
  52   1      }
  53          
  54          // uart 0.4 0.5
  55          
  56          void blink() {
  57   1        uint8_t i,j,k,n;
  58   1        for (n = 0; n < 2; n++) {
  59   2              for (i = 0; i < 20; i++)
  60   2                {
  61   3                  NOP ();
  62   3      
  63   3              for (j = 0; j < 255; j++)
  64   3                {
  65   4                  NOP ();
  66   4      
  67   4              for (k = 0; k < 255; k++)
  68   4                {
  69   5                  NOP ();
  70   5                }}}
  71   2              P1 ^= 0x04; //toggle LED pin
  72   2          }
  73   1      }
  74          
  75          void write_pix(uint8_t* dat, int start) {
  76   1        uint8_t i = 0;
  77   1        NUM_BYTES_WR = 17;
  78   1        SMB_DATA_OUT[0] = 0x40;
  79   1      
  80   1        for (i = 0; i < 16; i++) {
  81   2            SMB_DATA_OUT[i + 1] = dat[start + i];
  82   2        }
  83   1      
  84   1        TARGET = SLAVE_ADDR << 1;
  85   1        SMB_Write();
  86   1        T0_Waitms (50);
  87   1      }
  88          
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 4   

  89          void write_line(int val) {
  90   1        int i, j;
  91   1        int cur_val = 0;
  92   1        uint8_t dnum[8] = {11, 0, 0, 10, 0, 0, 11, 11};
  93   1      
  94   1        dnum[5] = (uint8_t) (val % 10);
  95   1        val = val / 10;
  96   1        dnum[4] = (uint8_t) (val % 10);
  97   1        val = val / 10;
  98   1        dnum[2] = (uint8_t) (val % 10);
  99   1        val = val / 10;
 100   1        dnum[1] = (uint8_t) (val % 10);
 101   1      
 102   1        if (dnum[1] == 0) {
 103   2            dnum[1] = 12;
 104   2        }
 105   1      
 106   1        for (i = 0; i < 3; i++) {
 107   2          for (j = 0; j < 8; j++) {
 108   3              cur_val = dnum[j];
 109   3              if (cur_val > 7) {
 110   4                  cur_val = 128 * 3 + (cur_val - 8) * 16;
 111   4              } else {
 112   4                  cur_val = cur_val * 16;
 113   4              }
 114   3              write_pix(sdat, i * 128 + cur_val);
 115   3          }
 116   2        }
 117   1      }
 118          
 119          int main (void)
 120          {
 121   1        uint8_t SFRPAGE_save;
 122   1      
 123   1        volatile uint8_t dat;               // Test counter
 124   1        volatile uint8_t data_count;        // SMB_DATA_IN and SMB_DATA_OUT counter
 125   1      
 126   1        uint8_t dval;
 127   1        int ncnt = 0;
 128   1        int n2cnt = 0;
 129   1        int n3cnt = 0;
 130   1        int i = 0;
 131   1      
 132   1        enter_DefaultMode_from_RESET();
 133   1      
 134   1      
 135   1        //P0 = 0xFF; //set all pins to high so inputs can operate
 136   1        //P1 = 0xFF;
 137   1        //P2 = 0xFF;
 138   1      
 139   1        // ALEX STUFF
 140   1        SFRPAGE_save = SFRPAGE;
 141   1        SFRPAGE = 0x30;
 142   1        DAC0L = (546&0xFF);
 143   1        DAC0H = ((546>>8)&0xFF);
 144   1        DAC1L = 119;
 145   1        DAC1H = 3;
 146   1        SFRPAGE = SFRPAGE_save;
 147   1                                  // Spin forever
 148   1      
 149   1      /*
 150   1        //enter_BusFreeMode_from_RESET();
 151   1      
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 5   

 152   1           // If slave is holding SDA low because of an improper SMBus reset or error
 153   1           while(!SDA)
 154   1           {
 155   1              // Provide clock pulses to allow the slave to advance out
 156   1              // of its current state. This will allow it to release SDA.
 157   1              XBR2 = 0x40;                     // Enable Crossbar
 158   1              SCL = 0;                         // Drive the clock low
 159   1              for(i = 0; i < 255; i++);        // Hold the clock low
 160   1              SCL = 1;                         // Release the clock
 161   1              while(!SCL);                     // Wait for open-drain
 162   1                                               // clock output to rise
 163   1              for(i = 0; i < 10; i++);         // Hold the clock high
 164   1              XBR2 = 0x00;                     // Disable Crossbar
 165   1      
 166   1           }
 167   1      
 168   1           blink();
 169   1           enter_DefaultMode_from_RESET();
 170   1      */
 171   1      
 172   1           blink();
 173   1           T0_Waitms (50);
 174   1      
 175   1           // <------------ init screen
 176   1           NUM_BYTES_WR = 5;
 177   1           SMB_DATA_OUT[0] = 0;
 178   1           SMB_DATA_OUT[1] = SSD1306_DISPLAYOFF;
 179   1           SMB_DATA_OUT[2] = SSD1306_SETDISPLAYCLOCKDIV;
 180   1           SMB_DATA_OUT[3] = 0x80;
 181   1           SMB_DATA_OUT[4] = SSD1306_SETMULTIPLEX;
 182   1           TARGET = SLAVE_ADDR << 1;
 183   1           SMB_Write();
 184   1           T0_Waitms (50);
 185   1      
 186   1           NUM_BYTES_WR = 2;
 187   1           SMB_DATA_OUT[0] = 0;
 188   1           SMB_DATA_OUT[1] = 64 - 1;
 189   1           TARGET = SLAVE_ADDR << 1;
 190   1           SMB_Write();
 191   1           T0_Waitms (50);
 192   1      
 193   1           NUM_BYTES_WR = 5;
 194   1           SMB_DATA_OUT[0] = 0;
 195   1           SMB_DATA_OUT[1] = SSD1306_SETDISPLAYOFFSET;
 196   1           SMB_DATA_OUT[2] = 0x0;
 197   1           SMB_DATA_OUT[3] = SSD1306_SETSTARTLINE | 0x0;
 198   1           SMB_DATA_OUT[4] = SSD1306_CHARGEPUMP;
 199   1           TARGET = SLAVE_ADDR << 1;
 200   1           SMB_Write();
 201   1           T0_Waitms (50);
 202   1      
 203   1           NUM_BYTES_WR = 2;
 204   1           SMB_DATA_OUT[0] = 0;
 205   1           SMB_DATA_OUT[1] = 0x14;
 206   1           TARGET = SLAVE_ADDR << 1;
 207   1           SMB_Write();
 208   1           T0_Waitms (50);
 209   1      
 210   1           NUM_BYTES_WR = 5;
 211   1           SMB_DATA_OUT[0] = 0;
 212   1           SMB_DATA_OUT[1] = SSD1306_MEMORYMODE;
 213   1           SMB_DATA_OUT[2] = 0x00;
 214   1           SMB_DATA_OUT[3] = SSD1306_SEGREMAP | 0x1;
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 6   

 215   1           SMB_DATA_OUT[4] = SSD1306_COMSCANDEC;
 216   1           TARGET = SLAVE_ADDR << 1;
 217   1           SMB_Write();
 218   1           T0_Waitms (50);
 219   1      
 220   1           NUM_BYTES_WR = 2;
 221   1           SMB_DATA_OUT[0] = 0;
 222   1           SMB_DATA_OUT[1] = SSD1306_SETCOMPINS;
 223   1           TARGET = SLAVE_ADDR << 1;
 224   1           SMB_Write();
 225   1           T0_Waitms (50);
 226   1      
 227   1           NUM_BYTES_WR = 2;
 228   1           SMB_DATA_OUT[0] = 0;
 229   1           SMB_DATA_OUT[1] = 0x12;
 230   1           TARGET = SLAVE_ADDR << 1;
 231   1           SMB_Write();
 232   1           T0_Waitms (50);
 233   1      
 234   1           NUM_BYTES_WR = 2;
 235   1           SMB_DATA_OUT[0] = 0;
 236   1           SMB_DATA_OUT[1] = SSD1306_SETCONTRAST;
 237   1           TARGET = SLAVE_ADDR << 1;
 238   1           SMB_Write();
 239   1           T0_Waitms (50);
 240   1      
 241   1           NUM_BYTES_WR = 2;
 242   1           SMB_DATA_OUT[0] = 0;
 243   1           SMB_DATA_OUT[1] = 0xCF;
 244   1           TARGET = SLAVE_ADDR << 1;
 245   1           SMB_Write();
 246   1           T0_Waitms (50);
 247   1      
 248   1           NUM_BYTES_WR = 2;
 249   1           SMB_DATA_OUT[0] = 0;
 250   1           SMB_DATA_OUT[1] = SSD1306_SETPRECHARGE;
 251   1           TARGET = SLAVE_ADDR << 1;
 252   1           SMB_Write();
 253   1           T0_Waitms (50);
 254   1      
 255   1           NUM_BYTES_WR = 2;
 256   1           SMB_DATA_OUT[0] = 0;
 257   1           SMB_DATA_OUT[1] = 0xF1;
 258   1           TARGET = SLAVE_ADDR << 1;
 259   1           SMB_Write();
 260   1           T0_Waitms (50);
 261   1      
 262   1           NUM_BYTES_WR = 7;
 263   1           SMB_DATA_OUT[0] = 0;
 264   1           SMB_DATA_OUT[1] = SSD1306_SETVCOMDETECT;
 265   1           SMB_DATA_OUT[2] = 0x40;
 266   1           SMB_DATA_OUT[3] = SSD1306_DISPLAYALLON_RESUME;
 267   1           SMB_DATA_OUT[4] = SSD1306_NORMALDISPLAY;
 268   1           SMB_DATA_OUT[5] = SSD1306_DEACTIVATE_SCROLL;
 269   1           SMB_DATA_OUT[6] = SSD1306_DISPLAYON;
 270   1           TARGET = SLAVE_ADDR << 1;
 271   1           SMB_Write();
 272   1           T0_Waitms (50);
 273   1      
 274   1      
 275   1           // <---- load stuff to screen
 276   1      
 277   1           // <--- clear screen ---->
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 7   

 278   1           NUM_BYTES_WR = 6;
 279   1           SMB_DATA_OUT[0] = 0;
 280   1           SMB_DATA_OUT[1] = SSD1306_PAGEADDR;
 281   1           SMB_DATA_OUT[2] = 0;
 282   1           SMB_DATA_OUT[3] = 0xFF;
 283   1           SMB_DATA_OUT[4] = SSD1306_COLUMNADDR;
 284   1           SMB_DATA_OUT[5] = 0;
 285   1           TARGET = SLAVE_ADDR << 1;
 286   1           SMB_Write();
 287   1           T0_Waitms (50);
 288   1      
 289   1           NUM_BYTES_WR = 2;
 290   1           SMB_DATA_OUT[0] = 0;
 291   1           SMB_DATA_OUT[1] = 128 - 1;
 292   1           TARGET = SLAVE_ADDR << 1;
 293   1           SMB_Write();
 294   1           T0_Waitms (50);
 295   1           i = 0;
 296   1           // DONT TOUCH
 297   1           SFRPAGE_save = SFRPAGE;
 298   1           SFRPAGE = 0x0;
 299   1           TCON |= TCON_TR0__RUN;
 300   1           SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 301   1           SFRPAGE = SFRPAGE_save;
 302   1           ncnt = 0;
 303   1           while (1) {
 304   2              // first line
 305   2              write_line(voltage);
 306   2      
 307   2              // black space
 308   2              for (n2cnt = 0; n2cnt < 8; n2cnt++) {
 309   3                 write_pix(sdat, 7 * 128);
 310   3              }
 311   2      
 312   2              // second line
 313   2              write_line(amp);
 314   2      
 315   2              // black space
 316   2              for (n2cnt = 0; n2cnt < 8; n2cnt++) {
 317   3                write_pix(sdat, 7 * 128);
 318   3              }
 319   2              ncnt++;
 320   2           }
 321   1      
 322   1      }
*** WARNING C280 IN LINE 123 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'dat': unreferenced local
             - variable
*** WARNING C280 IN LINE 124 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'data_count': unreference
             -d local variable
*** WARNING C280 IN LINE 126 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'dval': unreferenced loca
             -l variable
 323          
 324          //-----------------------------------------------------------------------------
 325          // Support Functions
 326          //-----------------------------------------------------------------------------
 327          
 328          //-----------------------------------------------------------------------------
 329          // SMB_Write
 330          //-----------------------------------------------------------------------------
 331          //
 332          // Return Value : None
 333          // Parameters   : None
 334          //
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 8   

 335          // Writes a single byte to the slave with address specified by the <TARGET>
 336          // variable.
 337          // Calling sequence:
 338          // 1) Write target slave address to the <TARGET> variable
 339          // 2) Write outgoing data to the <SMB_DATA_OUT> variable array
 340          // 3) Call SMB_Write()
 341          //
 342          //-----------------------------------------------------------------------------
 343          void SMB_Write(void)
 344          {
 345   1         while(SMB_BUSY);                    // Wait for SMBus to be free.
 346   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 347   1         SMB_RW = 0;                         // Mark this transfer as a WRITE
 348   1         SMB0CN0_STA = 1;                    // Start transfer
 349   1      }
 350          
 351          //-----------------------------------------------------------------------------
 352          // SMB_Read
 353          //-----------------------------------------------------------------------------
 354          //
 355          // Return Value : None
 356          // Parameters   : None
 357          //
 358          // Reads a single byte from the slave with address specified by the <TARGET>
 359          // variable.
 360          // Calling sequence:
 361          // 1) Write target slave address to the <TARGET> variable
 362          // 2) Call SMB_Write()
 363          // 3) Read input data from <SMB_DATA_IN> variable array
 364          //
 365          //-----------------------------------------------------------------------------
 366          void SMB_Read(void)
 367          {
 368   1         while(SMB_BUSY);                    // Wait for bus to be free.
 369   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 370   1         SMB_RW = 1;                         // Mark this transfer as a READ
 371   1      
 372   1         SMB0CN0_STA = 1;                    // Start transfer
 373   1      
 374   1         while(SMB_BUSY);                    // Wait for transfer to complete
 375   1      }
 376          
 377          //-----------------------------------------------------------------------------
 378          // T0_Waitms
 379          //-----------------------------------------------------------------------------
 380          //
 381          // Return Value : None
 382          // Parameters   :
 383          //   1) uint8_t ms - number of milliseconds to wait
 384          //                        range is full range of character: 0 to 255
 385          //
 386          // Configure Timer0 to wait for <ms> milliseconds using SYSCLK as its time
 387          // base.
 388          //
 389          //-----------------------------------------------------------------------------
 390          void T0_Waitms(uint8_t ms)
 391          {
 392   1      
 393   1        uint8_t i,j,k,n;
 394   1      
 395   1      
 396   1        for (j = 0; j < 20; j++)
 397   1          {
C51 COMPILER V9.60.0.0   TP4_MAIN                                                          04/18/2021 17:56:41 PAGE 9   

 398   2            NOP ();
 399   2      
 400   2        for (k = 0; k < 255; k++){
 401   3          NOP ();
 402   3        }
 403   2          }
 404   1      
 405   1      }
*** WARNING C280 IN LINE 390 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'ms': unreferenced local 
             -variable
*** WARNING C280 IN LINE 393 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'i': unreferenced local v
             -ariable
*** WARNING C280 IN LINE 393 OF /home/rootie/SimplicityStudio/v5_workspace/tp4/src/tp4_main.c: 'n': unreferenced local v
             -ariable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    866    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
